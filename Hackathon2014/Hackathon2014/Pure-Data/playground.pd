#N canvas 660 23 679 777 10;
#X obj 15 543 pdjent;
#X floatatom 25 29 5 0 0 0 - - -;
#X msg 14 80 reset;
#X obj 53 475 pdj_terminal;
#N canvas 908 22 475 533 test_tone 0;
#X obj 64 241 outlet;
#X obj 45 -243 inlet;
#X obj 48 -217 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 50 -200 reset \, frequency = 200 \, @x 8 \, @y 20 \, x = 10
\, y_sine = 4 \, y_vol = 8 \, y_dac = 12 \, volume = 0.4 \, hello =
Hello! \, obj dollarzero = f \$0 \, obj hello = route [hello] @x 30
\, obj sub = route Subpatch-[hello] @y 16 \, obj sine = osc~ [frequency]
@x [x] @y [y_sine] \, obj vol = *~ [volume] @x [x] @y [y_vol] \, obj
out = dac~ 2 @x [x] @y [y_dac] \, obj plus2 = switch~ 1 @x 23 @y 10
\, obj plus1 = + 1 @x 20 @y 7 \, obj blo = block~ 64 @x 10 \, obj loadb
= loadfloat 0 @x 20 @y 5 \, sine -> vol \, vol -> out \, loadb -> plus1
\, plus1 -> plus2 \, loadbang \, show \,;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 0 0;
#X restore 14 -121 pd test_tone;
#X obj 14 -143 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 228 143 lfor;
#X msg 149 -222 reset \, frequency = 200 \, @x 8 \, @y 20 \, x = 10
\, y_sine = 4 \, y_vol = 8 \, y_dac = 12 \, volume = 0.4 \, ` hello
= Hello! \, obj dollarzero = f \$0 \, obj hello = route [hello] @x
30 \, obj sub = pd Subpatch-[hello] @y 16 \, obj sine = osc~ [frequency]
@x [x] @y [y_sine] \, obj vol = *~ [volume] @x [x] @y [y_vol] \, obj
out = dac~ 2 @x [x] @y [y_dac] \, obj plus2 = switch~ 1 @x 23 @y 10
\, obj plus1 = + 1 @x 20 @y 7 \, obj blo = block~ 64 @x 10 \, obj loadb
= loadfloat 0 @x 20 @y 5 \, sine -> vol \, vol -> out \, loadb -> plus1
\, plus1 -> plus2 \, loadbang \, show \,;
#X obj 173 276 lindexset;
#X obj 184 213 lindexget;
#X msg 77 113 reset \, @x 100 \, @y 200 \, add1 => f 3 @x 1 @y 1 \,
add2 => f 10 @x 0.5 @y 1 \, trig => t b b @x 0.75 @y 0.5 \, lb => loadbang
1 @x 0.5 @y 0.25 \, lb -> trig \, trig -> add1 1 0 \, trig -> add2
0 0 \, adder => + 0 @x 0.75 @y 1.25 \, add1 -> adder 0 1 \, add2 ->
adder 0 0 \, print => print PD @y 1.3 \, adder -> print \, loadbang
\, show;
#X msg 306 115 reset \, @x 100 \, @y 100 \, test2 => f 944 @y 0.7 \,
test1 => f 4 @x .3: test1.other => f 9: test1.adder => + @y .35: test1.adder
-> test2: test1.other -> test1.adder: test1 -> test1.adder.1 \, def
testFunction(arg1 arg2): f \, loadbang \, show;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 4 0;
#X connect 7 0 0 0;
#X connect 10 0 0 0;
#X connect 11 0 0 0;
